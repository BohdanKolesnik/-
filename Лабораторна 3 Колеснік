#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <iomanip>

// Функція для перетворення шістнадцяткового рядка в масив байтів
std::vector<uint8_t> hexToBytes(const std::string& hex) {
    std::vector<uint8_t> bytes;
    for (size_t i = 0; i < hex.size(); i += 2) {
        std::string byteString = hex.substr(i, 2);
        uint8_t byte = static_cast<uint8_t>(std::stoi(byteString, nullptr, 16));
        bytes.push_back(byte);
    }
    return bytes;
}

// Функція для перетворення масиву байтів у шістнадцятковий рядок
std::string bytesToHex(const std::vector<uint8_t>& bytes) {
    std::ostringstream hexStream;
    for (uint8_t byte : bytes) {
        hexStream << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(byte);
    }
    return hexStream.str();
}

// Функція для виконання XOR між двома масивами
std::vector<uint8_t> xorBytes(const std::vector<uint8_t>& a, const std::vector<uint8_t>& b) {
    std::vector<uint8_t> result(a.size());
    for (size_t i = 0; i < a.size(); ++i) {
        result[i] = a[i] ^ b[i];
    }
    return result;
}

int main() {
    // Введені дані (перехоплені повідомлення)
    std::string message1, message2, message3;
    std::getline(std::cin, message1);
    std::getline(std::cin, message2);
    std::getline(std::cin, message3);

    // Перетворення повідомлень у масиви байтів
    auto bytes1 = hexToBytes(message1);
    auto bytes2 = hexToBytes(message2);
    auto bytes3 = hexToBytes(message3);

    // Розшифрування: XOR трьох повідомлень
    auto originalMessageBytes = xorBytes(xorBytes(bytes1, bytes2), bytes3);

    // Перетворення розшифрованого повідомлення у текст
    std::string clearText(originalMessageBytes.begin(), originalMessageBytes.end());
    std::cout << clearText << std::endl;

    return 0;
}
