#include <iostream>
#include <string>
#include <cctype>
#include <cmath>
#include <limits>
#include <algorithm>

// Частоти літер в англійській мові (%)
const double LETTER_FREQUENCIES[26] = {
    8.08, 1.67, 3.18, 3.99, 12.56, 2.17, 1.80, 5.27, 7.24, 0.14,
    0.63, 4.04, 2.60, 7.38, 7.47, 1.91, 0.09, 6.42, 6.59, 9.15,
    2.79, 1.00, 1.89, 0.21, 1.65, 0.07
};

// Функція для підрахунку частот символів у тексті
void computeLetterFrequencies(const std::string& inputText, double letterCounts[26]) {
    int totalCharacters = 0;

    // Очищення масиву частот
    std::fill(letterCounts, letterCounts + 26, 0.0);

    // Підрахунок кількості кожної літери
    for (char ch : inputText) {
        if (std::isalpha(ch)) {
            ch = std::tolower(ch);
            letterCounts[ch - 'a']++;
            totalCharacters++;
        }
    }

    // Перетворення кількостей у відсотки
    if (totalCharacters > 0) {
        for (int i = 0; i < 26; i++) {
            letterCounts[i] = (letterCounts[i] / totalCharacters) * 100.0;
        }
    }
}

// Функція для розрахунку відхилення частот (менше значення — краще)
double computeDeviation(const double letterCounts[26]) {
    double deviationScore = 0.0;

    for (int i = 0; i < 26; i++) {
        deviationScore += std::pow(letterCounts[i] - LETTER_FREQUENCIES[i], 2);
    }

    return deviationScore;
}

// Функція для розшифровки тексту з конкретним зсувом
void shiftAndDecode(const std::string& inputText, std::string& outputText, int shiftValue) {
    outputText = inputText; // Копіюємо текст

    for (size_t i = 0; i < inputText.length(); ++i) {
        char currentChar = inputText[i];
        if (std::isalpha(currentChar)) {
            char alphabetStart = std::islower(currentChar) ? 'a' : 'A';
            outputText[i] = (currentChar - alphabetStart - shiftValue + 26) % 26 + alphabetStart; // Застосування зсуву
        }
    }
}

int main() {
    // Введення закодованого тексту
    std::string encryptedMessage;
    std::getline(std::cin, encryptedMessage);

    // Змінні для пошуку найкращого результату
    std::string optimalDecodedText;
    double lowestDeviation = std::numeric_limits<double>::max();
    double frequencyArray[26];

    // Перебір усіх можливих зсувів (від 0 до 25)
    for (int shiftValue = 0; shiftValue < 26; ++shiftValue) {
        std::string tempDecodedText;

        // Розшифровуємо текст із поточним зсувом
        shiftAndDecode(encryptedMessage, tempDecodedText, shiftValue);

        // Розраховуємо частоти літер у розшифрованому тексті
        computeLetterFrequencies(tempDecodedText, frequencyArray);

        // Оцінюємо текст на основі відхилення частот
        double deviation = computeDeviation(frequencyArray);

        // Якщо поточне відхилення краще, зберігаємо цей результат
        if (deviation < lowestDeviation) {
            lowestDeviation = deviation;
            optimalDecodedText = tempDecodedText;
        }
    }

    // Виведення найкращого розшифрованого тексту
    std::cout << optimalDecodedText << std::endl;

    return 0;
}
